})
output$plot <- renderPlot({
if(is.null(input$slider)){ return(NULL) }
x <- x_points()
y <- c(1,2,3)
plot(x=x, y=y, type="o")
points(x=input$slider, y=y[which(x==input$slider)], pch=19, col="red")
})
},
ui=pageWithSidebar(
headerPanel("renderUI() - example 2"),
sidebarPanel(
radioButtons(inputId = "select",
label = "x",
choices = list("1 2 3"="c(1,2,3)", "1 2 5"="c(1,2,5)", "2 4 6"="c(2,4,6)")),
htmlOutput("sliderUI")
),
mainPanel(
plotOutput('plot')
)
)))
library(shiny)
runApp(
list(
server=function(input, output, session) {
x_points <- reactive({ eval(parse(text=input$select)) })
output$sliderUI <- renderUI({
x <- x_points()
sliderInput(inputId="slider", label="", min=x[1], max=x[3], value=x[1], step=x[2]-x[1])
})
output$plot <- renderPlot({
if(is.null(input$slider)){ return(NULL) }
x <- x_points()
y <- c(1,2,3)
plot(x=x, y=y, type="o")
points(x=input$slider, y=y[which(x==input$slider)], pch=19, col="red")
})
},
ui=pageWithSidebar(
headerPanel("renderUI() - example 2"),
sidebarPanel(
radioButtons(inputId = "select",
label = "x",
choices = list("1 2 3"="c(1,2,3)", "1 3 6"="c(1,3,5)", "2 4 6"="c(2,4,6)")),
htmlOutput("sliderUI")
),
mainPanel(
plotOutput('plot')
)
)))
library(shiny)
runApp(
list(
server=function(input, output, session) {
x_points <- reactive({ eval(parse(text=input$select)) })
output$sliderUI <- renderUI({
x <- x_points()
sliderInput(inputId="slider", label="", min=x[1], max=x[3], value=x[1], step=x[2]-x[1])
})
output$plot <- renderPlot({
if(is.null(input$slider)){ return(NULL) }
x <- x_points()
y <- c(1,2,3)
plot(x=x, y=y, type="o")
points(x=input$slider, y=y[which(x==input$slider)], pch=19, col="red")
})
},
ui=pageWithSidebar(
headerPanel("renderUI() - example 2"),
sidebarPanel(
radioButtons(inputId = "select",
label = "x",
choices = list("1 2 3"="c(1,2,3)", "1 3 6"="c(1,3,5)", "2 4 6"="c(2,4,6)")),
htmlOutput("sliderUI")
),
mainPanel(
plotOutput('plot')
)
)))
library(shiny)
runApp(
list(
server=function(input, output, session) {
x_points <- reactive({ eval(parse(text=input$select)) })
output$sliderUI <- renderUI({
x <- x_points()
sliderInput(inputId="slider", label="", min=x[1], max=x[3], value=x[1], step=x[2]-x[1])
})
output$plot <- renderPlot({
if(is.null(input$slider)){ return(NULL) }
x <- x_points()
y <- c(1,2,3)
plot(x=x, y=y, type="o")
points(x=input$slider, y=y[which(x==input$slider)], pch=19, col="red")
})
},
ui=pageWithSidebar(
headerPanel("renderUI() - example 2"),
sidebarPanel(
radioButtons(inputId = "select",
label = "x",
choices = list("1 2 3"="c(1,2,3)", "1 3 6"="c(1,3,5)", "2 4 6"="c(2,4,6)")),
htmlOutput("sliderUI")
),
mainPanel(
plotOutput('plot')
)
)))
library(shiny)
runApp(
list(
server=function(input, output, session) {
x_points <- reactive({ eval(parse(text=input$select)) })
output$sliderUI <- renderUI({
x <- x_points()
sliderInput(inputId="slider", label="", min=x[1], max=x[3], value=x[1])#, step=x[2]-x[1])
})
output$plot <- renderPlot({
if(is.null(input$slider)){ return(NULL) }
x <- x_points()
y <- c(1,2,3)
plot(x=x, y=y, type="o")
points(x=input$slider, y=y[which(x==input$slider)], pch=19, col="red")
})
},
ui=pageWithSidebar(
headerPanel("renderUI() - example 2"),
sidebarPanel(
radioButtons(inputId = "select",
label = "x",
choices = list("1 2 3"="c(1,2,3)", "1 3 6"="c(1,3,6)", "2 4 6"="c(2,4,6)")),
htmlOutput("sliderUI")
),
mainPanel(
plotOutput('plot')
)
)))
library(shiny)
runApp(
list(
server=function(input, output, session) {
x_points <- reactive({ eval(parse(text=input$select)) })
output$sliderUI <- renderUI({
x <- x_points()
sliderInput(inputId="slider", label="", min=x[1], max=x[3], value=x[1], step=x[2]-x[1])
})
output$plot <- renderPlot({
if(is.null(input$slider)){ return(NULL) }
x <- x_points()
y <- c(1,2,3)
plot(x=x, y=y, type="o")
points(x=input$slider, y=y[which(x==input$slider)], pch=19, col="red")
})
},
ui=pageWithSidebar(
headerPanel("renderUI() - example 2"),
sidebarPanel(
radioButtons(inputId = "select",
label = "x",
choices = list("1 2 3"="c(1,2,3)", "1 3 5"="c(1,3,5)", "2 4 6"="c(2,4,6)")),
htmlOutput("sliderUI")
),
mainPanel(
plotOutput('plot')
)
)))
x <- c(1,3,5)
cat(as.character(sliderInput(inputId="slider", label="", min=x[1], max=x[3], value=x[1], step=x[2]-x[1])))
x
eval(parse(text="c(1,3,5)"))
library(shiny)
runApp(
list(
server=function(input, output, session) {
x_points <- reactive({ eval(parse(text=input$select)) })
output$sliderUI <- renderUI({
x <- x_points()
sliderInput(inputId="slider", label="", min=x[1], max=x[3], value=x[1], step=x[2]-x[1])
})
output$plot <- renderPlot({
if(is.null(input$slider)){ return(NULL) }
x <- x_points()
y <- c(1,2,3)
plot(x=x, y=y, type="o")
points(x=input$slider, y=y[which(x==input$slider)], pch=19, col="red")
})
},
ui=pageWithSidebar(
headerPanel("renderUI() - example 2"),
sidebarPanel(
radioButtons(inputId = "select",
label = "x",
choices = list("1 2 3"="c(1,2,3)", "1 3 5"="c(1,3,5)", "2 4 6"="c(2,4,6)")),
htmlOutput("sliderUI")
),
mainPanel(
plotOutput('plot')
)
)))
library(shiny)
runApp(
list(
server=function(input, output, session) {
x_points <- reactive({ eval(parse(text=input$select)) })
output$sliderUI <- renderUI({
x <- x_points()
sliderInput(inputId="slider", label="", min=x[1], max=x[3], value=x[1], step=x[2]-x[1])
})
output$plot <- renderPlot({
if(is.null(input$slider)){ return(NULL) }
x <- x_points()
y <- c(1,2,3)
plot(x=x, y=y, type="o")
points(x=input$slider, y=y[which(x==input$slider)], pch=19, col="red")
})
},
ui=pageWithSidebar(
headerPanel("renderUI() - example 2"),
sidebarPanel(
radioButtons(inputId = "select",
label = "x",
choices = list("1 2 3"="c(1,2,3)", "1 3 5"="c(1,3,5)", "2 4 6"="c(2,4,6)")),
uiOutput("sliderUI")
),
mainPanel(
plotOutput('plot')
)
)))
library(shiny)
runApp(
list(
server=function(input, output, session) {
x_points <- reactive({ eval(parse(text=input$select)) })
output$sliderUI <- renderUI({
x <- x_points()
sliderInput(inputId="slider", label="", min=x[1], max=x[3], value=x[1], step=x[2]-x[1])
})
output$plot <- renderPlot({
if(is.null(input$slider)){ return(NULL) }
x <- x_points()
y <- c(1,2,3)
plot(x=x, y=y, type="o")
points(x=input$slider, y=y[which(x==input$slider)], pch=19, col="red")
})
},
ui=pageWithSidebar(
headerPanel("renderUI() - example 2"),
sidebarPanel(
radioButtons(inputId = "select",
label = "x",
choices = list("1 2 3"="c(1,2,3)", "1 3 5"="c(1,3,5)", "2 4 6"="c(2,4,6)")),
uiOutput("sliderUI")
),
mainPanel(
#plotOutput('plot')
)
)))
library(shiny)
runApp(
list(
server=function(input, output, session) {
x_points <- reactive({ eval(parse(text=input$select)) })
output$sliderUI <- renderUI({
x <- x_points()
sliderInput(inputId="slider", label="", min=x[1], max=x[3], value=x[1], step=x[2]-x[1])
})
},
ui=pageWithSidebar(
headerPanel("renderUI() - example 2"),
sidebarPanel(
radioButtons(inputId = "select",
label = "x",
choices = list("1 2 3"="c(1,2,3)", "1 3 5"="c(1,3,5)", "2 4 6"="c(2,4,6)")),
uiOutput("sliderUI")
),
mainPanel(
)
)))
x <- c(1,3,5)
sliderInput(inputId="slider", label="", min=x[1], max=x[3], value=x[1], step=x[2]-x[1])
library(shiny)
runApp(
list(
server=function(input, output, session) {
x_points <- reactive({ eval(parse(text=input$select)) })
output$sliderUI <- renderUI({
#         x <- x_points()
#         sliderInput(inputId="slider", label="", min=x[1], max=x[3], value=x[1], step=x[2]-x[1])
x <- c(1,3,5)
sliderInput(inputId="slider", label="", min=x[1], max=x[3], value=x[1], step=x[2]-x[1])
})
},
ui=pageWithSidebar(
headerPanel("renderUI() - example 2"),
sidebarPanel(
radioButtons(inputId = "select",
label = "x",
choices = list("1 2 3"="c(1,2,3)", "1 3 5"="c(1,3,5)", "2 4 6"="c(2,4,6)")),
uiOutput("sliderUI")
),
mainPanel(
)
)))
library(shiny)
runApp(
list(
server=function(input, output, session) {
x_points <- reactive({ eval(parse(text=input$select)) })
output$sliderUI <- renderUI({
#         x <- x_points()
#         sliderInput(inputId="slider", label="", min=x[1], max=x[3], value=x[1], step=x[2]-x[1])
#         x <- c(1,3,5)
#         sliderInput(inputId="slider", label="", min=x[1], max=x[3], value=x[1], step=x[2]-x[1])
sliderInput(inputId="slider", label="", min=1, max=5, value=1, step=2)
})
},
ui=pageWithSidebar(
headerPanel("renderUI() - example 2"),
sidebarPanel(
radioButtons(inputId = "select",
label = "x",
choices = list("1 2 3"="c(1,2,3)", "1 3 5"="c(1,3,5)", "2 4 6"="c(2,4,6)")),
uiOutput("sliderUI")
),
mainPanel(
)
)))
library(shiny)
runApp(
list(
server=function(input, output, session) {
sliderInput(inputId="slider", label="", min=1, max=5, value=1, step=2)
})
},
ui=pageWithSidebar(
headerPanel("bug with slider Input"),
sidebarPanel(
uiOutput("sliderUI")
)
mainPanel()
)))
library(shiny)
runApp(
list(
server=function(input, output, session) {
sliderInput(inputId="slider", label="", min=1, max=5, value=1, step=2)
},
ui=pageWithSidebar(
headerPanel("bug with slider Input"),
sidebarPanel(
uiOutput("sliderUI")
)
mainPanel()
)))
library(shiny)
runApp(
list(
server=function(input, output, session) {
sliderInput(inputId="slider", label="", min=1, max=5, value=1, step=2)
},
ui=pageWithSidebar(
headerPanel("bug with slider Input"),
sidebarPanel(
uiOutput("sliderUI")
),
mainPanel()
)))
library(shiny)
runApp(
list(
server=function(input, output, session) {
output$sliderUI <- renderUI({
sliderInput(inputId="slider", label="", min=1, max=5, value=1, step=2)
})
},
ui=pageWithSidebar(
headerPanel("bug with slider Input"),
sidebarPanel(
uiOutput("sliderUI")
),
mainPanel()
)))
library(shiny)
runApp(
list(
server=function(input, output, session) {
output$sliderUI <- renderUI({
sliderInput(inputId="slider", label="", min=1, max=5, value=1, step=2)
})
},
ui=pageWithSidebar(
headerPanel("bug with slider Input"),
sidebarPanel(
sliderInput(inputId="slider1", label="", min=1, max=5, value=1, step=2),
uiOutput("sliderUI")
),
mainPanel()
)
)
)
library(shiny)
runApp(
list(
server=function(input, output, session) {
},
ui=pageWithSidebar(
headerPanel("bug with slider Input"),
sidebarPanel(
sliderInput(inputId="slider", label="", min=1, max=5, value=1, step=2),
),
mainPanel()
)
)
)
library(shiny)
runApp(
list(
server=function(input, output, session) {
},
ui=pageWithSidebar(
headerPanel("bug with slider Input"),
sidebarPanel(
sliderInput(inputId="slider", label="", min=1, max=5, value=1, step=2)
),
mainPanel()
)
)
)
library(shiny)
runApp(
list(
server=function(input, output, session) {},
ui=pageWithSidebar(
headerPanel("bug with slider Input"),
sidebarPanel(
sliderInput(inputId="slider", label="", min=1, max=5, value=1, step=2)
),
mainPanel()
)
)
)
?splinefun
library(shiny)
runApp(
list(
server=function(input, output, session) {
x_points <- reactive({ eval(parse(text=input$select)) })
output$sliderUI <- renderUI({
x <- x_points()
sliderInput(inputId="slider", label="", min=x[1], max=x[3], value=x[1])
})
output$plot <- renderPlot({
if(is.null(input$slider)){ return(NULL) }
x <- x_points()
f <- splinefun(x,c(1,2,3))
curve(f(x),from=1,to=3)
points(x=input$slider, y=f(input$slider), pch=19, col="red")
})
},
ui=pageWithSidebar(
headerPanel("renderUI() - example 2"),
sidebarPanel(
radioButtons(inputId = "select",
label = "x",
choices = list("1 2 3"="c(1,2,3)", "1 3 5"="c(1,3,5)", "2 4 6"="c(2,4,6)")),
uiOutput("sliderUI")
),
mainPanel(
#plotOutput('plot')
)
)))
library(shiny)
runApp(
list(
server=function(input, output, session) {
x_points <- reactive({ eval(parse(text=input$select)) })
output$sliderUI <- renderUI({
x <- x_points()
sliderInput(inputId="slider", label="", min=x[1], max=x[3], value=x[1])
})
output$plot <- renderPlot({
if(is.null(input$slider)){ return(NULL) }
x <- x_points()
f <- splinefun(x,c(1,2,3))
curve(f(x),from=1,to=3)
points(x=input$slider, y=f(input$slider), pch=19, col="red")
})
},
ui=pageWithSidebar(
headerPanel("renderUI() - example 2"),
sidebarPanel(
radioButtons(inputId = "select",
label = "x",
choices = list("1 2 3"="c(1,2,3)", "1 3 5"="c(1,3,5)", "2 4 6"="c(2,4,6)")),
uiOutput("sliderUI")
),
mainPanel(
plotOutput('plot')
)
)))
x <- "c(2,3)"
eval(parse(text=x))
library(stringr)
library(gplots)
install.packages("gplots")
gplots::textplot
gplots::textplot.matrix
gplots:::textplot.matrix
setwd("D:/Github")
setwd("D:/Github/DemingTOST_presentation_v0")
library(slidify)
slidify("index.Rmd")
